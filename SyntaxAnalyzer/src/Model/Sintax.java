
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 10 13:28:33 COT 2020
//----------------------------------------------------

package Model;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 10 13:28:33 COT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\003\003\000\002\004\005\000\002\004\007\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\010" +
    "\000\002\004\010\000\002\004\011\000\002\004\011\000" +
    "\002\006\011\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\006\000\002\013" +
    "\007\000\002\007\015\000\002\010\011\000\002\011\013" +
    "\000\002\012\011\000\002\014\012\000\002\014\011\000" +
    "\002\005\005\000\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\034\004\001\002\000\004\026\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\027\010\001\002\000\004\030\011\001\002\000" +
    "\014\005\023\006\024\007\015\012\016\013\021\001\002" +
    "\000\020\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\031\ufff8\001\002\000\020\005\ufffe\006\ufffe\007\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\031\ufffe\001\002\000\020\005" +
    "\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\031\ufff5" +
    "\001\002\000\004\026\155\001\002\000\004\026\147\001" +
    "\002\000\020\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\031\ufffa\001\002\000\020\005\ufffc\006\ufffc\007" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\031\ufffc\001\002\000\004" +
    "\026\114\001\002\000\020\005\023\006\024\007\015\011" +
    "\064\012\016\013\021\031\067\001\002\000\006\024\044" +
    "\036\045\001\002\000\004\036\025\001\002\000\006\014" +
    "\027\023\026\001\002\000\004\004\036\001\002\000\004" +
    "\004\030\001\002\000\006\004\031\036\032\001\002\000" +
    "\004\035\035\001\002\000\004\004\033\001\002\000\004" +
    "\035\034\001\002\000\020\005\uffec\006\uffec\007\uffec\011" +
    "\uffec\012\uffec\013\uffec\031\uffec\001\002\000\020\005\uffee" +
    "\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee\031\uffee\001" +
    "\002\000\006\004\037\036\040\001\002\000\004\035\043" +
    "\001\002\000\004\004\041\001\002\000\004\035\042\001" +
    "\002\000\020\005\uffed\006\uffed\007\uffed\011\uffed\012\uffed" +
    "\013\uffed\031\uffed\001\002\000\020\005\uffef\006\uffef\007" +
    "\uffef\011\uffef\012\uffef\013\uffef\031\uffef\001\002\000\004" +
    "\036\057\001\002\000\012\014\051\023\047\024\050\035" +
    "\046\001\002\000\020\005\ufff4\006\ufff4\007\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\031\ufff4\001\002\000\004\037\055\001" +
    "\002\000\004\035\054\001\002\000\004\037\052\001\002" +
    "\000\004\035\053\001\002\000\020\005\ufff2\006\ufff2\007" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\031\ufff2\001\002\000\020" +
    "\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\031" +
    "\ufff1\001\002\000\004\035\056\001\002\000\020\005\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\031\ufff3\001" +
    "\002\000\004\035\060\001\002\000\020\005\ufff0\006\ufff0" +
    "\007\ufff0\011\ufff0\012\ufff0\013\ufff0\031\ufff0\001\002\000" +
    "\020\005\uffff\006\uffff\007\uffff\011\uffff\012\uffff\013\uffff" +
    "\031\uffff\001\002\000\020\005\ufff9\006\ufff9\007\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\031\ufff9\001\002\000\020\005\ufff6" +
    "\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\031\ufff6\001" +
    "\002\000\004\030\072\001\002\000\020\005\ufffb\006\ufffb" +
    "\007\ufffb\011\ufffb\012\ufffb\013\ufffb\031\ufffb\001\002\000" +
    "\020\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\031\ufffd\001\002\000\004\002\000\001\002\000\004\011" +
    "\064\001\002\000\020\005\ufff7\006\ufff7\007\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\031\ufff7\001\002\000\014\005\023\006" +
    "\024\007\015\012\016\013\021\001\002\000\020\005\023" +
    "\006\024\007\015\011\064\012\016\013\021\031\074\001" +
    "\002\000\004\012\075\001\002\000\004\026\076\001\002" +
    "\000\006\025\100\036\101\001\002\000\004\027\112\001" +
    "\002\000\006\027\uffea\035\uffea\001\002\000\004\022\102" +
    "\001\002\000\012\004\103\025\106\036\105\037\104\001" +
    "\002\000\006\004\107\036\110\001\002\000\006\027\uffe8" +
    "\035\uffe8\001\002\000\006\027\uffe7\035\uffe7\001\002\000" +
    "\006\027\uffe9\035\uffe9\001\002\000\006\027\uffe6\035\uffe6" +
    "\001\002\000\004\004\111\001\002\000\006\027\uffe5\035" +
    "\uffe5\001\002\000\004\035\113\001\002\000\020\005\uffe2" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\031\uffe2\001" +
    "\002\000\006\005\115\036\117\001\002\000\004\036\140" +
    "\001\002\000\004\027\134\001\002\000\004\014\120\001" +
    "\002\000\004\037\121\001\002\000\004\035\122\001\002" +
    "\000\006\025\100\036\101\001\002\000\004\035\124\001" +
    "\002\000\006\024\126\036\127\001\002\000\004\027\uffdf" +
    "\001\002\000\004\036\133\001\002\000\006\023\130\024" +
    "\131\001\002\000\004\037\132\001\002\000\004\027\uffdd" +
    "\001\002\000\004\027\uffde\001\002\000\004\027\uffdc\001" +
    "\002\000\004\030\135\001\002\000\014\005\023\006\024" +
    "\007\015\012\016\013\021\001\002\000\020\005\023\006" +
    "\024\007\015\011\064\012\016\013\021\031\137\001\002" +
    "\000\020\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\031\uffe1\001\002\000\004\014\141\001\002\000\004" +
    "\037\142\001\002\000\004\035\143\001\002\000\006\025" +
    "\100\036\101\001\002\000\004\035\145\001\002\000\006" +
    "\024\126\036\127\001\002\000\004\027\uffe0\001\002\000" +
    "\006\025\100\036\101\001\002\000\004\027\151\001\002" +
    "\000\004\030\152\001\002\000\014\005\023\006\024\007" +
    "\015\012\016\013\021\001\002\000\020\005\023\006\024" +
    "\007\015\011\064\012\016\013\021\031\154\001\002\000" +
    "\020\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\031\uffe3\001\002\000\006\025\100\036\101\001\002\000" +
    "\004\027\157\001\002\000\004\030\160\001\002\000\014" +
    "\005\023\006\024\007\015\012\016\013\021\001\002\000" +
    "\020\005\023\006\024\007\015\011\064\012\016\013\021" +
    "\031\162\001\002\000\022\005\uffeb\006\uffeb\007\uffeb\010" +
    "\163\011\uffeb\012\uffeb\013\uffeb\031\uffeb\001\002\000\004" +
    "\030\164\001\002\000\014\005\023\006\024\007\015\012" +
    "\016\013\021\001\002\000\020\005\023\006\024\007\015" +
    "\011\064\012\016\013\021\031\166\001\002\000\020\005" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\031\uffe4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\021\004\012\006\017\007\016\010" +
    "\011\012\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\060\006\065\007\064\010\061\011\067\012\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\070\001\001\000" +
    "\002\001\001\000\016\003\072\004\012\006\017\007\016" +
    "\010\011\012\013\001\001\000\016\004\060\006\065\007" +
    "\064\010\061\011\067\012\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\122\001\001\000\002\001\001\000\004\005\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\135\004\012\006" +
    "\017\007\016\010\011\012\013\001\001\000\016\004\060" +
    "\006\065\007\064\010\061\011\067\012\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\143\001\001\000\002\001\001\000" +
    "\004\005\145\001\001\000\002\001\001\000\004\013\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\152\004\012\006\017\007\016\010\011\012\013\001\001" +
    "\000\016\004\060\006\065\007\064\010\061\011\067\012" +
    "\062\001\001\000\002\001\001\000\004\013\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\160\004" +
    "\012\006\017\007\016\010\011\012\013\001\001\000\016" +
    "\004\060\006\065\007\064\010\061\011\067\012\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\164" +
    "\004\012\006\017\007\016\010\011\012\013\001\001\000" +
    "\016\004\060\006\065\007\064\010\061\011\067\012\062" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARE_FOR ::= opAutoIncrement Identifier 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARE_FOR ::= Identifier opAutoIncrement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARE_FOR ::= Identifier opAttribution Number 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCTION_FOR ::= Identifier opAssignment Number semmiColon INSTRUCTION_BOOLEAN semmiColon DECLARE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCTION_FOR ::= dataType Identifier opAssignment Number semmiColon INSTRUCTION_BOOLEAN semmiColon DECLARE_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FOR ::= For leftParen INSTRUCTION_FOR rightParen leftBrace INSTRUCTION rightBrace 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DO_WHILE ::= Do leftBrace INSTRUCTION rightBrace While leftParen INSTRUCTION_BOOLEAN rightParen semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WHILE ::= While leftParen INSTRUCTION_BOOLEAN rightParen leftBrace INSTRUCTION rightBrace 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF_ELSE ::= If leftParen INSTRUCTION_BOOLEAN rightParen leftBrace INSTRUCTION rightBrace Else leftBrace INSTRUCTION rightBrace 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCTION_BOOLEAN ::= Identifier opRelational Quotes Identifier Quotes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_BOOLEAN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCTION_BOOLEAN ::= Identifier opRelational Quotes Quotes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_BOOLEAN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCTION_BOOLEAN ::= Identifier opRelational Identifier 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_BOOLEAN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION_BOOLEAN ::= Identifier opRelational Number 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_BOOLEAN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION_BOOLEAN ::= Identifier opRelational Boolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_BOOLEAN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION_BOOLEAN ::= Boolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_BOOLEAN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= If leftParen INSTRUCTION_BOOLEAN rightParen leftBrace INSTRUCTION rightBrace 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARE ::= stringType Identifier opAssignment Quotes Identifier Quotes semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARE ::= stringType Identifier opAttribution Quotes Identifier Quotes semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARE ::= stringType Identifier opAssignment Quotes Quotes semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARE ::= stringType Identifier opAttribution Quotes Quotes semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARE ::= dataType opAutoIncrement Identifier semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARE ::= dataType Identifier opAutoIncrement semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARE ::= dataType Identifier opAssignment Number semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARE ::= dataType Identifier opAttribution Number semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARE ::= dataType Identifier semmiColon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= INSTRUCTION FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= INSTRUCTION DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= INSTRUCTION WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= INSTRUCTION IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= INSTRUCTION IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTION ::= DECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTION ::= INSTRUCTION DECLARE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= Main leftParen rightParen leftBrace INSTRUCTION rightBrace 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

